#' Plots a word cloud given the word table
#'
#' @author Jeff Allen \email{jeff.allen@@trestletechnology.net}
myCloud <- function (w, col, yspace = 1.3, xspace = 0.1, minh = 0, add=FALSE, xmin = 0, xmax = 0.98, ystart=0.95, ...)
{
if (missing(col))
col <- "#000000"
omar <- par("mar")
par(mar = c(0, 0, 0, 0))
if (!add){
plot(xmin:xmax, 0:ystart, type = "n", axes = FALSE)
}
x = xmin
y = ystart
xch = minh
cm = 3/max(w)
. <- lapply(1:length(w), function(i) {
cex = w[i] * cm
ctw = strwidth(names(w[i]), cex = cex)
cth = strheight(names(w[i]), cex = cex)
if (cth > xch)
xch <<- cth
if (x + ctw > xmax) {
x <<- xmin
y <<- y - (yspace * xch)
xch <<- minh
}
text(x, y, names(w[i]), cex = cex, adj = c(0, 0.5), col = col[i])
x <<- x + ctw + xspace
})
par(mar=omar)
invisible(TRUE)
}
#' Plot the sentiment trend with the words that are most positively sentimented in the top and lowly sentimented on the bottom
#' @author Jeff Allen \email{jeff.allen@@trestletechnology.net}
plotHighLow <- function(sermon, sentenceLevel = TRUE){
sent <- sermon$sent;
sermAuthor <- sermon$author;
sermTitle <- sermon$title;
serm <- sermon$serm;
omar <- par("mar")
par(mar = c(2, 2, 2, 2))
plot(1:length(sent), sapply(sapply(sent, as.numeric), median), main=paste(sermAuthor,"-", sermTitle), xlab="Paragraphs Spoken", ylab="Sentiment", pch=".")
#text(1:length(sent), sapply(sapply(sent, as.numeric), median), 1:length(sent))
lines(smooth.spline(1:length(sent), sapply(sapply(sent, as.numeric), median), df=3), col=3)
abline(h=0);
library(snippets)
library(tm)
if (!sentenceLevel){
#paragraph level
positivePars <- sapply(sapply(sent, as.numeric), median) > 0;
negativePars <- sapply(sapply(sent, as.numeric), median) < 0;
words <- tolower(unlist(lapply(serm[positivePars], function(x) strsplit(x, " "))))
pt <- getWordTable(words, maxWords = 45);
words <- tolower(unlist(lapply(serm[negativePars], function(x) strsplit(x, " "))))
nt <- getWordTable(words, maxWords = 45);
} else {
#sentence level
positiveSents <- sapply(unlist(sent), as.numeric) > 0;
negativeSents <- sapply(unlist(sent), as.numeric) < 0;
words <- tolower(unlist(lapply(unlist(serm)[positiveSents], function(x) strsplit(x, " "))))
pt <- getWordTable(words, maxWords = 45);
words <- tolower(unlist(lapply(unlist(serm)[negativeSents], function(x) strsplit(x, " "))))
nt <- getWordTable(words, maxWords = 45);
par(mar=omar);
}
#require exclusivity
ptnew <- pt[!names(pt) %in% names(nt)]
ntnew <- nt[!names(nt) %in% names(pt)]
myCloud(ptnew, col = col.br(ptnew, fit=TRUE), add=TRUE, xmin=1,xmax=length(sent)+.5,ystart=.80)
myCloud(ntnew, col = col.br(ntnew, fit=TRUE), add=TRUE, xmin=1,xmax=length(sent)+.5,ystart=-.25)
return(list(neg=ntnew,pos=ptnew));
}
#' Identify the unique words in two dictionaries
#' @author Jeff Allen \email{jeff.allen@@trestletechnology.net}
getUniqueWords <- function (dictA, dictB, cutoff){
inCommon <- dictA[which(names(dictA)[1:cutoff] %in% names(dictB)[1:cutoff])]
aUnique <- dictA[which(!names(dictA)[1:cutoff] %in% names(dictB)[1:cutoff])]
bUnique <- dictB[which(!names(dictB)[1:cutoff] %in% names(dictA)[1:cutoff])]
return(list(common=inCommon,a=aUnique,b=bUnique));
}
#' Given sentiments of multiple sermons, show their average trends
#' @author Jeff Allen \email{jeff.allen@@trestletechnology.net}
plotAuthorsAvg <- function(authorsSent, title=""){
mattSent <- authorsSent;
mattSent <- lapply(mattSent, function(x){lapply(x, as.numeric)});
mattPar <- lapply(mattSent, function(x){sapply(x, mean)});
mattPar <- lapply(mattPar,function(x){n <- x > 0; n <- n *2; n <- n-1; return((n) * (abs(x)^2))})
plot(1,1, xlim=c(0,1),ylim=c(-1,1),type="n", xlab="Position in Sermon", ylab="Sentiment", main=title);
sermXs <- array();
sermYs <- array();
for (i in 1:length(mattPar)){
thisSerm <- mattPar[[i]];
points(x=seq(0,1,length.out=length(thisSerm)), y=thisSerm, pch=".")
sermXs <- c(sermXs, seq(0,1,length.out=length(thisSerm)));
sermYs <- c(sermYs,thisSerm);
lines(smooth.spline(x=seq(0,1,length.out=length(thisSerm)), y=thisSerm, df=3), col="#DDDDDD")
}
lines(smooth.spline(x=sermXs, y=sermYs, df=3), lwd=2)
}
head(mydata)
install.packages(tm)
library(tm)
install.packages("tm")
library(tm)
install.packages("r-forge")
library(sentiment)
library(sentiment)
library(tm)
library("tm", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages("tm")
tm
(tm)
library(tm)
library("tm")
wd()
wd
(wd)
mydata <- read.csv("getdata-data-ss06hid.csv")
head(mydata)
length(idaho_housing$VAL[!is.na(idaho_housing$VAL) &idaho_housing$VAL==24])
length(mydata$VAL[!is.na(mydata$VAL) & mydata$VAL==24])
mydata(18:23)
mydata
head(mydata 1:18)
mydata(1:17)
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
2
library(httr)
require(httpuv)
require(jsonlite)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. Register an application at https://github.com/settings/applications
#    Insert your values below - if secret is omitted, it will look it up in
#    the GITHUB_CONSUMER_SECRET environmental variable.
#
#    Use http://localhost:1410 as the callback url
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
f <- file.path(getwd(), "ss06pid.csv")
download.file(url, f)
acs <- data.table(read.csv(f))
query1 <- sqldf("select pwgtp1 from acs where AGEP < 50")
query2 <- sqldf("select pwgtp1 from acs")  ## NO
query3 <- sqldf("select * from acs where AGEP < 50 and pwgtp1")  ## NO
query4 <- sqldf("select * from acs where AGEP < 50")  ## NO
identical(query3, query4)
install.packages("swirl)")
identical(query3, query4)
install.packages("swirl")
library("swirl")
swirl()
library(swirl)
install_from_swirl("Data Analysis")
library(swirl)
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf <- read.csv("path2csv.csv", stringAsFactors = FALSE)
mydf <- read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2.csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
install.packages(dplyr)
install.packages("dplyr"")
install.packages("dplyr")
install.packages("dplyr")
exit
install.packages("dplyr")
install.packages("dplyr")
swirl()
library(swir)
library(swirl)
swirl()
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
mydf
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -5:-20)
cran(-5:20)
-5:20
-(5:20)
select(cran,-(X;size))
select(cran,-(X:size))
filter(cran, pakcage == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version =< "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3.5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version == !is.na())
filter(cran, r_version(!is.na)
filter(cran, r_version(!is.na))
filter(cran, r_version(!is.na()))
filter(cran, r_version(!is.na()))
help
filter(cran, !is.na(r_version))
cran2 <- select(cran, x,date,time,size,r_version,r_os,package,version,country,ip_id)
cran2 <- select(cran, X,date,time,size,r_version,r_os,package,version,country,ip_id)
cran2 <- select(size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes =mean(size))
#directories
uci_hard_dir <- "UCI\ HAR\Dataset"
feature_file <- paste(uci_hard_dir, "/features.txt", sept ="")
activity_labels_file <-paste(uci_hard_dir, "/activity_lables.txt", sep="")
x_train_file <- paste(uci_hard_dir, "/train/X_train.txt", sep = "")
y_train_file <- paste(uci_hard_dir, "/train/y_train.txt", sep = "")
subject_train_file <- paste(uci_hard_dir, "/train/subject_train.txt", sep = "")
x_test_file  <- paste(uci_hard_dir, "/test/X_test.txt", sep = "")
y_test_file  <- paste(uci_hard_dir, "/test/y_test.txt", sep = "")
subject_test_file <- paste(uci_hard_dir, "/test/subject_test.txt", sep = "")
#directories
uci_hard_dir <- "UCI\ HAR\ Dataset"
feature_file <- paste(uci_hard_dir, "/features.txt", sept ="")
activity_labels_file <-paste(uci_hard_dir, "/activity_lables.txt", sep="")
x_train_file <- paste(uci_hard_dir, "/train/X_train.txt", sep = "")
y_train_file <- paste(uci_hard_dir, "/train/y_train.txt", sep = "")
subject_train_file <- paste(uci_hard_dir, "/train/subject_train.txt", sep = "")
x_test_file  <- paste(uci_hard_dir, "/test/X_test.txt", sep = "")
y_test_file  <- paste(uci_hard_dir, "/test/y_test.txt", sep = "")
subject_test_file <- paste(uci_hard_dir, "/test/subject_test.txt", sep = "")
#load raw data
features <- read.table(feature_file, colClassses = c("Character"))
activity_lables <-read.table(activity_lables_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
#load raw data
features <- read.table(feature_file, colClassses = c("character"))
activity_lables <-read.table(activity_lables_file, col.names = c("ActivityId", "Activity"))
#load raw data
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
#directories
uci_hard_dir <- "UCI\ HAR\ Dataset"
feature_file <- paste(uci_hard_dir, "/features.txt", sep = "")
activity_labels_file <- paste(uci_hard_dir, "/activity_labels.txt", sep = "")
x_train_file <- paste(uci_hard_dir, "/train/X_train.txt", sep = "")
y_train_file <- paste(uci_hard_dir, "/train/y_train.txt", sep = "")
subject_train_file <- paste(uci_hard_dir, "/train/subject_train.txt", sep = "")
x_test_file  <- paste(uci_hard_dir, "/test/X_test.txt", sep = "")
y_test_file  <- paste(uci_hard_dir, "/test/y_test.txt", sep = "")
subject_test_file <- paste(uci_hard_dir, "/test/subject_test.txt", sep = "")
#
#load raw data
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
#bidning the data
training_sensor_data <- cbind(cbind(x_train, subject_train), y_train)
test_sesnor_data <-cbine(cbind(x_test, subject_test), y_test)
sensor_data <- rbind(training_sensor_data, test_sensor_data)
#bidning the data
training_sensor_data <- cbind(cbind(x_train, subject_train), y_train)
test_sesnor_data <-cbind(cbind(x_test, subject_test), y_test)
sensor_data <- rbind(training_sensor_data, test_sensor_data)
#bidning the data
training_sensor_data <- cbind(cbind(x_train, subject_train), y_train)
test_sensor_data <-cbind(cbind(x_test, subject_test), y_test)
sensor_data <- rbind(training_sensor_data, test_sensor_data)
#lable columns
sensor_lables <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId")), [,2]
names(sensor_data) <- sensor_lables
#lable columns
sensor_lables <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId")) [,2]
names(sensor_data) <- sensor_lables
#std/mean
sensor_data_mean_std <- sesnor_data][,grep1("mean|std|Subject|ActivityId", names(sensor_data))]
#std/mean
sensor_data_mean_std <- sesnor_data[,grep1("mean|std|Subject|ActivityId", names(sensor_data))]
#std/mean
sensor_data_mean_std <- sensor_data[,grep1("mean|std|Subject|ActivityId", names(sensor_data))]
#std/mean
sensor_data_mean_std <- sensor_data[,grepl("mean|std|Subject|ActivityId", names(sensor_data))]
#name
sensor_data_mean_std <- join(sensor_data_mean_std, activity_labels, by = "ActivityId", match = "first")
sensor_data_mean_std <- sensor_data_mean_std[,-1]
#label
# clean
names(sensor_data_mean_std) <- gsub('\\(|\\)',"",names(sensor_data_mean_std), perl = TRUE)
# clean
names(sensor_data_mean_std) <- make.names(names(sensor_data_mean_std))
# clean
names(sensor_data_mean_std) <- gsub('Acc',"Acceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('GyroJerk',"AngularAcceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Gyro',"AngularSpeed",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Mag',"Magnitude",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^t',"TimeDomain.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^f',"FrequencyDomain.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.mean',".Mean",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.std',".StandardDeviation",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq\\.',"Frequency.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq$',"Frequency",names(sensor_data_mean_std))
# tidy data set
sensor_avg_by_act_sub = ddply(sensor_data_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(sensor_avg_by_act_sub, file = "sensor_avg_by_act_sub.txt")
install.packages(ddply)
install.packages("ddply"")
install.packages("ddply")
# tidy data set
sensor_avg_by_act_sub = ddply(sensor_data_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(sensor_avg_by_act_sub, file = "sensor_avg_by_act_sub.txt")
install.packages("ddply")
install.packages("tapply")
install.packages("daply")
install.packages("dplyr")
# tidy data set
sensor_avg_by_act_sub = dplyr(sensor_data_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(sensor_avg_by_act_sub, file = "sensor_avg_by_act_sub.txt")
#directories
uci_hard_dir <- "UCI\ HAR\ Dataset"
feature_file <- paste(uci_hard_dir, "/features.txt", sep = "")
activity_labels_file <- paste(uci_hard_dir, "/activity_labels.txt", sep = "")
x_train_file <- paste(uci_hard_dir, "/train/X_train.txt", sep = "")
y_train_file <- paste(uci_hard_dir, "/train/y_train.txt", sep = "")
subject_train_file <- paste(uci_hard_dir, "/train/subject_train.txt", sep = "")
x_test_file  <- paste(uci_hard_dir, "/test/X_test.txt", sep = "")
y_test_file  <- paste(uci_hard_dir, "/test/y_test.txt", sep = "")
subject_test_file <- paste(uci_hard_dir, "/test/subject_test.txt", sep = "")
#
#load raw data
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
#bidning the data
training_sensor_data <- cbind(cbind(x_train, subject_train), y_train)
test_sensor_data <-cbind(cbind(x_test, subject_test), y_test)
sensor_data <- rbind(training_sensor_data, test_sensor_data)
#lable columns
sensor_lables <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId")) [,2]
names(sensor_data) <- sensor_lables
#std/mean
sensor_data_mean_std <- sensor_data[,grepl("mean|std|Subject|ActivityId", names(sensor_data))]
#name
sensor_data_mean_std <- join(sensor_data_mean_std, activity_labels, by = "ActivityId", match = "first")
sensor_data_mean_std <- sensor_data_mean_std[,-1]
#label
# clean
names(sensor_data_mean_std) <- gsub('\\(|\\)',"",names(sensor_data_mean_std), perl = TRUE)
# clean
names(sensor_data_mean_std) <- make.names(names(sensor_data_mean_std))
# clean
names(sensor_data_mean_std) <- gsub('Acc',"Acceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('GyroJerk',"AngularAcceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Gyro',"AngularSpeed",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Mag',"Magnitude",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^t',"TimeDomain.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^f',"FrequencyDomain.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.mean',".Mean",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.std',".StandardDeviation",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq\\.',"Frequency.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq$',"Frequency",names(sensor_data_mean_std))
# tidy data set
sensor_avg_by_act_sub = dplyr(sensor_data_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(sensor_avg_by_act_sub, file = "sensor_avg_by_act_sub.txt")
require(rplyr)
#directories
uci_hard_dir <- "UCI\ HAR\ Dataset"
feature_file <- paste(uci_hard_dir, "/features.txt", sep = "")
activity_labels_file <- paste(uci_hard_dir, "/activity_labels.txt", sep = "")
x_train_file <- paste(uci_hard_dir, "/train/X_train.txt", sep = "")
y_train_file <- paste(uci_hard_dir, "/train/y_train.txt", sep = "")
subject_train_file <- paste(uci_hard_dir, "/train/subject_train.txt", sep = "")
x_test_file  <- paste(uci_hard_dir, "/test/X_test.txt", sep = "")
y_test_file  <- paste(uci_hard_dir, "/test/y_test.txt", sep = "")
subject_test_file <- paste(uci_hard_dir, "/test/subject_test.txt", sep = "")
#
#load raw data
features <- read.table(feature_file, colClasses = c("character"))
activity_labels <- read.table(activity_labels_file, col.names = c("ActivityId", "Activity"))
x_train <- read.table(x_train_file)
y_train <- read.table(y_train_file)
subject_train <- read.table(subject_train_file)
x_test <- read.table(x_test_file)
y_test <- read.table(y_test_file)
subject_test <- read.table(subject_test_file)
#bidning the data
training_sensor_data <- cbind(cbind(x_train, subject_train), y_train)
test_sensor_data <-cbind(cbind(x_test, subject_test), y_test)
sensor_data <- rbind(training_sensor_data, test_sensor_data)
#lable columns
sensor_lables <- rbind(rbind(features, c(562, "Subject")), c(563, "ActivityId")) [,2]
names(sensor_data) <- sensor_lables
#std/mean
sensor_data_mean_std <- sensor_data[,grepl("mean|std|Subject|ActivityId", names(sensor_data))]
#name
sensor_data_mean_std <- join(sensor_data_mean_std, activity_labels, by = "ActivityId", match = "first")
sensor_data_mean_std <- sensor_data_mean_std[,-1]
#label
# clean
names(sensor_data_mean_std) <- gsub('\\(|\\)',"",names(sensor_data_mean_std), perl = TRUE)
# clean
names(sensor_data_mean_std) <- make.names(names(sensor_data_mean_std))
# clean
names(sensor_data_mean_std) <- gsub('Acc',"Acceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('GyroJerk',"AngularAcceleration",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Gyro',"AngularSpeed",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Mag',"Magnitude",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^t',"TimeDomain.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('^f',"FrequencyDomain.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.mean',".Mean",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('\\.std',".StandardDeviation",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq\\.',"Frequency.",names(sensor_data_mean_std))
names(sensor_data_mean_std) <- gsub('Freq$',"Frequency",names(sensor_data_mean_std))
# tidy data set
sensor_avg_by_act_sub = ddply(sensor_data_mean_std, c("Subject","Activity"), numcolwise(mean))
write.table(sensor_avg_by_act_sub, file = "sensor_avg_by_act_sub.txt")
rm(list=ls())
# Loading Data
energy_data <- read.table("household_power_consumption.txt", sep = ";" , na.strings="?", header=TRUE)
# Formatting Data column
energy_data$Date <- as.Date(energy_data$Date, format="%d/%m/%Y")
# Subsetting from the dates 2007-02-01 and 2007-02-02
energy_data <- subset(energy_data, energy_data$Date >= as.Date("2007-02-01") )
energy_data <- subset(energy_data, energy_data$Date <= as.Date("2007-02-02") )
# Energy Time. Day + Hour
energy_data$Time<-paste(energy_data$Date,energy_data$Time,sep="")
energy_data$Time<-strptime(energy_data$Time,format = "%Y-%m-%d %H:%M:%S")
# First plot
png("plot1.png",width=480, height=480, units="px")
hist(energy_data$Global_active_power,main="Global Active Power", xlab="Global Active Power (kilowats)", col="red")
dev.off()
# First plot
png("plot1.png",width=480, height=480, units="px")
hist(energy_data$Global_active_power,main="Global Active Power", xlab="Global Active Power (kilowats)", col="red")
# First plot
png("plot1.png",width=480, height=480, units="px")
hist(energy_data$Global_active_power,main="Global Active Power", xlab="Global Active Power (kilowats)", col="red")
devoff()
# First plot
png("plot1.png",width=480, height=480, units="px")
hist(energy_data$Global_active_power,main="Global Active Power", xlab="Global Active Power (kilowats)", col="red")
dev.off()
# First plot
png("plot1.png",width=480, height=480, units="px")
hist(energy_data$Global_active_power,main="Global Active Power", xlab="Global Active Power (kilowats)", col="red")
dev.off()
